;; Analyzed by ClojureScript 0.0-3211
{:use-macros {gentype ec.macros, dom ec.macros, def-api ec.macros}, :excludes #{update}, :name ec.core, :imports nil, :requires nil, :uses nil, :defs {proto-map {:name ec.core/proto-map, :file "src\\ec\\core.cljs", :line 26, :column 1, :end-line 26, :end-column 15, :test true, :meta {:file "C:\\Users\\jplur\\Desktop\\dev\\place-makers\\src\\ec\\core.cljs", :line 26, :column 6, :end-line 26, :end-column 15}}, BIND->NEWFN {:name ec.core/BIND->NEWFN, :file "src\\ec\\core.cljs", :line 42, :column 1, :end-line 42, :end-column 21, :test true, :meta {:file "C:\\Users\\jplur\\Desktop\\dev\\place-makers\\src\\ec\\core.cljs", :line 42, :column 10, :end-line 42, :end-column 21}}, ->bind {:protocol-inline nil, :meta {:file "C:\\Users\\jplur\\Desktop\\dev\\place-makers\\src\\ec\\core.cljs", :line 74, :column 7, :end-line 74, :end-column 13, :arglists (quote ([o]))}, :name ec.core/->bind, :variadic false, :file "src\\ec\\core.cljs", :end-column 13, :method-params ([o]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 74, :end-line 74, :max-fixed-arity 1, :fn-var true, :arglists (quote ([o])), :test true}, remove! {:protocol-inline nil, :meta {:file "C:\\Users\\jplur\\Desktop\\dev\\place-makers\\src\\ec\\core.cljs", :line 12, :column 7, :end-line 12, :end-column 14, :arglists (quote ([o k]))}, :name ec.core/remove!, :variadic false, :file "src\\ec\\core.cljs", :end-column 14, :method-params ([o k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 2, :fn-var true, :arglists (quote ([o k])), :test true}, add-api {:protocol-inline nil, :meta {:file "C:\\Users\\jplur\\Desktop\\dev\\place-makers\\src\\ec\\core.cljs", :line 315, :column 7, :end-line 315, :end-column 14, :arglists (quote ([e]))}, :name ec.core/add-api, :variadic false, :file "src\\ec\\core.cljs", :end-column 14, :method-params ([e]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 315, :end-line 315, :max-fixed-arity 1, :fn-var true, :arglists (quote ([e])), :test true}, ->Comp {:protocol-inline nil, :meta {:file "C:\\Users\\jplur\\Desktop\\dev\\place-makers\\src\\ec\\core.cljs", :line 164, :column 10, :end-line 164, :end-column 14, :protocols #{cljs.core/ISwap cljs.core/IDeref}, :skip-protocol-flag #{cljs.core/ISwap cljs.core/IDeref}, :factory :positional, :arglists (quote ([data]))}, :protocols #{cljs.core/ISwap cljs.core/IDeref}, :name ec.core/->Comp, :variadic false, :file "src\\ec\\core.cljs", :end-column 14, :method-params ([data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 164, :end-line 164, :max-fixed-arity 1, :fn-var true, :arglists (quote ([data])), :skip-protocol-flag #{cljs.core/ISwap cljs.core/IDeref}, :test true}, log {:protocol-inline nil, :meta {:file "C:\\Users\\jplur\\Desktop\\dev\\place-makers\\src\\ec\\core.cljs", :line 14, :column 7, :end-line 14, :end-column 10, :arglists (quote ([x]))}, :name ec.core/log, :variadic false, :file "src\\ec\\core.cljs", :end-column 10, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, -o {:protocol-inline nil, :meta {:file "C:\\Users\\jplur\\Desktop\\dev\\place-makers\\src\\ec\\core.cljs", :line 122, :column 4, :end-line 122, :end-column 6, :protocol ec.core/IUid, :doc nil, :arglists (quote ([o]))}, :protocol ec.core/IUid, :name ec.core/-o, :variadic false, :file "src\\ec\\core.cljs", :end-column 6, :method-params ([o]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 120, :end-line 122, :max-fixed-arity 1, :fn-var true, :arglists (quote ([o])), :doc nil, :test true}, -destroy {:protocol-inline nil, :meta {:file "C:\\Users\\jplur\\Desktop\\dev\\place-makers\\src\\ec\\core.cljs", :line 295, :column 7, :end-line 295, :end-column 15, :arglists (quote ([o]))}, :name ec.core/-destroy, :variadic false, :file "src\\ec\\core.cljs", :end-column 15, :method-params ([o]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 295, :end-line 295, :max-fixed-arity 1, :fn-var true, :arglists (quote ([o])), :test true}, e-api {:name ec.core/e-api, :file "src\\ec\\core.cljs", :line 309, :column 1, :end-line 309, :end-column 11, :test true, :meta {:file "C:\\Users\\jplur\\Desktop\\dev\\place-makers\\src\\ec\\core.cljs", :line 309, :column 6, :end-line 309, :end-column 11}}, ->uid {:protocol-inline nil, :meta {:file "C:\\Users\\jplur\\Desktop\\dev\\place-makers\\src\\ec\\core.cljs", :line 72, :column 7, :end-line 72, :end-column 12, :arglists (quote ([o]))}, :name ec.core/->uid, :variadic false, :file "src\\ec\\core.cljs", :end-column 12, :method-params ([o]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 1, :fn-var true, :arglists (quote ([o])), :test true}, -find {:protocol-inline nil, :meta {:file "C:\\Users\\jplur\\Desktop\\dev\\place-makers\\src\\ec\\core.cljs", :line 324, :column 7, :end-line 324, :end-column 12, :arglists (quote ([o s]))}, :name ec.core/-find, :variadic false, :file "src\\ec\\core.cljs", :end-column 12, :method-params ([o s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 324, :end-line 324, :max-fixed-arity 2, :fn-var true, :arglists (quote ([o s])), :test true}, -uid {:protocol-inline nil, :meta {:file "C:\\Users\\jplur\\Desktop\\dev\\place-makers\\src\\ec\\core.cljs", :line 121, :column 4, :end-line 121, :end-column 8, :protocol ec.core/IUid, :doc nil, :arglists (quote ([o]))}, :protocol ec.core/IUid, :name ec.core/-uid, :variadic false, :file "src\\ec\\core.cljs", :end-column 8, :method-params ([o]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 120, :end-line 121, :max-fixed-arity 1, :fn-var true, :arglists (quote ([o])), :doc nil, :test true}, ChildAPI {:protocol-inline nil, :meta {:file "C:\\Users\\jplur\\Desktop\\dev\\place-makers\\src\\ec\\core.cljs", :line 174, :column 10, :end-line 174, :end-column 18}, :name ec.core/ChildAPI, :variadic false, :file "src\\ec\\core.cljs", :end-column 18, :method-params ([o p]), :protocol-impl nil, :arglists-meta (), :column 1, :line 174, :end-line 174, :max-fixed-arity 2, :fn-var true, :arglists nil, :test true}, property-lock! {:name ec.core/property-lock!, :file "src\\ec\\core.cljs", :line 54, :column 1, :end-line 54, :end-column 20, :test true, :meta {:file "C:\\Users\\jplur\\Desktop\\dev\\place-makers\\src\\ec\\core.cljs", :line 54, :column 6, :end-line 54, :end-column 20}}, serialize {:protocol-inline nil, :meta {:file "C:\\Users\\jplur\\Desktop\\dev\\place-makers\\src\\ec\\core.cljs", :line 21, :column 4, :end-line 21, :end-column 13, :protocol ec.core/IThing, :doc nil, :arglists (quote ([o]))}, :protocol ec.core/IThing, :name ec.core/serialize, :variadic false, :file "src\\ec\\core.cljs", :end-column 13, :method-params ([o]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists (quote ([o])), :doc nil, :test true}, copy {:protocol-inline nil, :meta {:file "C:\\Users\\jplur\\Desktop\\dev\\place-makers\\src\\ec\\core.cljs", :line 23, :column 4, :end-line 23, :end-column 8, :protocol ec.core/IThing, :doc nil, :arglists (quote ([o]))}, :protocol ec.core/IThing, :name ec.core/copy, :variadic false, :file "src\\ec\\core.cljs", :end-column 8, :method-params ([o]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists (quote ([o])), :doc nil, :test true}, ->o {:protocol-inline nil, :meta {:file "C:\\Users\\jplur\\Desktop\\dev\\place-makers\\src\\ec\\core.cljs", :line 73, :column 7, :end-line 73, :end-column 10, :arglists (quote ([uid]))}, :name ec.core/->o, :variadic false, :file "src\\ec\\core.cljs", :end-column 10, :method-params ([uid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 1, :fn-var true, :arglists (quote ([uid])), :test true}, IUid {:meta {:file "C:\\Users\\jplur\\Desktop\\dev\\place-makers\\src\\ec\\core.cljs", :line 120, :column 14, :end-line 120, :end-column 18, :doc nil, :protocol-symbol true, :protocol-info {:methods {-uid [[o]], -o [[o]]}}}, :protocol-symbol true, :name ec.core/IUid, :file "src\\ec\\core.cljs", :end-column 18, :column 1, :line 120, :protocol-info {:methods {-uid [[o]], -o [[o]]}}, :info nil, :end-line 120, :impls #{js/Object js/Number}, :doc nil, :test true}, IThing {:meta {:file "C:\\Users\\jplur\\Desktop\\dev\\place-makers\\src\\ec\\core.cljs", :line 17, :column 14, :end-line 17, :end-column 20, :doc nil, :protocol-symbol true, :protocol-info {:methods {init [[o]], update [[o]], destroy [[o]], serialize [[o]], deserialize [[o m]], copy [[o]], HTML [[o]]}}}, :protocol-symbol true, :name ec.core/IThing, :file "src\\ec\\core.cljs", :end-column 20, :column 1, :line 17, :protocol-info {:methods {init [[o]], update [[o]], destroy [[o]], serialize [[o]], deserialize [[o m]], copy [[o]], HTML [[o]]}}, :info nil, :end-line 17, :impls #{nil ec.core/Ent js/Object}, :doc nil, :test true}, init {:protocol-inline nil, :meta {:file "C:\\Users\\jplur\\Desktop\\dev\\place-makers\\src\\ec\\core.cljs", :line 18, :column 4, :end-line 18, :end-column 8, :protocol ec.core/IThing, :doc nil, :arglists (quote ([o]))}, :protocol ec.core/IThing, :name ec.core/init, :variadic false, :file "src\\ec\\core.cljs", :end-column 8, :method-params ([o]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists (quote ([o])), :doc nil, :test true}, uid-every {:protocol-inline nil, :meta {:file "C:\\Users\\jplur\\Desktop\\dev\\place-makers\\src\\ec\\core.cljs", :line 302, :column 7, :end-line 302, :end-column 16, :arglists (quote ([this f]))}, :name ec.core/uid-every, :variadic false, :file "src\\ec\\core.cljs", :end-column 16, :method-params ([this f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 302, :end-line 302, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this f])), :test true}, BIND->UIDSET {:name ec.core/BIND->UIDSET, :file "src\\ec\\core.cljs", :line 40, :column 1, :end-line 40, :end-column 22, :test true, :meta {:file "C:\\Users\\jplur\\Desktop\\dev\\place-makers\\src\\ec\\core.cljs", :line 40, :column 10, :end-line 40, :end-column 22}}, UID {:name ec.core/UID, :file "src\\ec\\core.cljs", :line 8, :column 1, :end-line 8, :end-column 13, :test true, :meta {:file "C:\\Users\\jplur\\Desktop\\dev\\place-makers\\src\\ec\\core.cljs", :line 8, :column 10, :end-line 8, :end-column 13}}, inspect {:protocol-inline nil, :meta {:file "C:\\Users\\jplur\\Desktop\\dev\\place-makers\\src\\ec\\core.cljs", :line 348, :column 7, :end-line 348, :end-column 14, :arglists (quote ([e]))}, :name ec.core/inspect, :variadic false, :file "src\\ec\\core.cljs", :end-column 14, :method-params ([e]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 348, :end-line 348, :max-fixed-arity 1, :fn-var true, :arglists (quote ([e])), :test true}, propagate {:protocol-inline nil, :meta {:file "C:\\Users\\jplur\\Desktop\\dev\\place-makers\\src\\ec\\core.cljs", :line 135, :column 7, :end-line 135, :end-column 16, :arglists (quote ([o f]))}, :name ec.core/propagate, :variadic false, :file "src\\ec\\core.cljs", :end-column 16, :method-params ([o f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 135, :end-line 135, :max-fixed-arity 2, :fn-var true, :arglists (quote ([o f])), :test true}, HTML {:protocol-inline nil, :meta {:file "C:\\Users\\jplur\\Desktop\\dev\\place-makers\\src\\ec\\core.cljs", :line 24, :column 4, :end-line 24, :end-column 8, :protocol ec.core/IThing, :doc nil, :arglists (quote ([o]))}, :protocol ec.core/IThing, :name ec.core/HTML, :variadic false, :file "src\\ec\\core.cljs", :end-column 8, :method-params ([o]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 24, :max-fixed-arity 1, :fn-var true, :arglists (quote ([o])), :doc nil, :test true}, destroy {:protocol-inline nil, :meta {:file "C:\\Users\\jplur\\Desktop\\dev\\place-makers\\src\\ec\\core.cljs", :line 20, :column 4, :end-line 20, :end-column 11, :protocol ec.core/IThing, :doc nil, :arglists (quote ([o]))}, :protocol ec.core/IThing, :name ec.core/destroy, :variadic false, :file "src\\ec\\core.cljs", :end-column 11, :method-params ([o]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists (quote ([o])), :doc nil, :test true}, update {:protocol-inline nil, :meta {:file "C:\\Users\\jplur\\Desktop\\dev\\place-makers\\src\\ec\\core.cljs", :line 19, :column 4, :end-line 19, :end-column 10, :protocol ec.core/IThing, :doc nil, :arglists (quote ([o]))}, :protocol ec.core/IThing, :name ec.core/update, :variadic false, :file "src\\ec\\core.cljs", :end-column 10, :method-params ([o]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists (quote ([o])), :doc nil, :test true}, C {:protocol-inline nil, :meta {:file "C:\\Users\\jplur\\Desktop\\dev\\place-makers\\src\\ec\\core.cljs", :line 254, :column 7, :end-line 254, :end-column 8, :arglists (quote ([bind data protocols]))}, :name ec.core/C, :variadic false, :file "src\\ec\\core.cljs", :end-column 8, :method-params ([bind data protocols]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 254, :end-line 254, :max-fixed-arity 3, :fn-var true, :arglists (quote ([bind data protocols])), :test true}, UIDsetAPI {:protocol-inline nil, :meta {:file "C:\\Users\\jplur\\Desktop\\dev\\place-makers\\src\\ec\\core.cljs", :line 214, :column 10, :end-line 214, :end-column 19}, :name ec.core/UIDsetAPI, :variadic false, :file "src\\ec\\core.cljs", :end-column 19, :method-params ([o]), :protocol-impl nil, :arglists-meta (), :column 1, :line 214, :end-line 214, :max-fixed-arity 1, :fn-var true, :arglists nil, :test true}, COMPOCOLS {:name ec.core/COMPOCOLS, :file "src\\ec\\core.cljs", :line 36, :column 1, :end-line 36, :end-column 19, :test true, :meta {:file "C:\\Users\\jplur\\Desktop\\dev\\place-makers\\src\\ec\\core.cljs", :line 36, :column 10, :end-line 36, :end-column 19}}, EntityAPI {:protocol-inline nil, :meta {:file "C:\\Users\\jplur\\Desktop\\dev\\place-makers\\src\\ec\\core.cljs", :line 183, :column 10, :end-line 183, :end-column 19}, :name ec.core/EntityAPI, :variadic false, :file "src\\ec\\core.cljs", :end-column 19, :method-params ([o]), :protocol-impl nil, :arglists-meta (), :column 1, :line 183, :end-line 183, :max-fixed-arity 1, :fn-var true, :arglists nil, :test true}, find-bound {:protocol-inline nil, :meta {:file "C:\\Users\\jplur\\Desktop\\dev\\place-makers\\src\\ec\\core.cljs", :line 326, :column 7, :end-line 326, :end-column 17, :arglists (quote ([s]))}, :name ec.core/find-bound, :variadic false, :file "src\\ec\\core.cljs", :end-column 17, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 326, :end-line 326, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :test true}, UID->OBJ {:name ec.core/UID->OBJ, :file "src\\ec\\core.cljs", :line 38, :column 1, :end-line 38, :end-column 18, :test true, :meta {:file "C:\\Users\\jplur\\Desktop\\dev\\place-makers\\src\\ec\\core.cljs", :line 38, :column 10, :end-line 38, :end-column 18}}, ->Ent {:protocol-inline nil, :meta {:file "C:\\Users\\jplur\\Desktop\\dev\\place-makers\\src\\ec\\core.cljs", :line 137, :column 10, :end-line 137, :end-column 13, :protocols #{ec.core/IThing cljs.core/ISwap ec.core/Object cljs.core/IDeref}, :skip-protocol-flag #{cljs.core/ISwap cljs.core/IDeref}, :factory :positional, :arglists (quote ([data]))}, :protocols #{ec.core/IThing cljs.core/ISwap ec.core/Object cljs.core/IDeref}, :name ec.core/->Ent, :variadic false, :file "src\\ec\\core.cljs", :end-column 13, :method-params ([data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 137, :end-line 137, :max-fixed-arity 1, :fn-var true, :arglists (quote ([data])), :skip-protocol-flag #{cljs.core/ISwap cljs.core/IDeref}, :test true}, E {:protocol-inline nil, :meta {:file "C:\\Users\\jplur\\Desktop\\dev\\place-makers\\src\\ec\\core.cljs", :line 236, :column 7, :end-line 236, :end-column 8, :arglists (quote ([& more])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(more)], :arglists [[& more]], :arglists-meta (nil)}}, :name ec.core/E, :variadic true, :file "src\\ec\\core.cljs", :end-column 8, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(more)], :arglists [[& more]], :arglists-meta (nil)}, :method-params [(more)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 236, :end-line 236, :max-fixed-arity 0, :fn-var true, :arglists [[& more]], :test true}, install-js-hidden-get-prop {:name ec.core/install-js-hidden-get-prop, :file "src\\ec\\core.cljs", :line 45, :column 1, :end-line 45, :end-column 32, :test true, :meta {:file "C:\\Users\\jplur\\Desktop\\dev\\place-makers\\src\\ec\\core.cljs", :line 45, :column 6, :end-line 45, :end-column 32}}, Ent {:num-fields 1, :protocols #{ec.core/IThing cljs.core/ISwap ec.core/Object cljs.core/IDeref}, :name ec.core/Ent, :file "src\\ec\\core.cljs", :end-column 13, :type true, :column 10, :line 137, :record false, :end-line 137, :skip-protocol-flag #{cljs.core/ISwap cljs.core/IDeref}}, UIDAPI {:protocol-inline nil, :meta {:file "C:\\Users\\jplur\\Desktop\\dev\\place-makers\\src\\ec\\core.cljs", :line 179, :column 10, :end-line 179, :end-column 16}, :name ec.core/UIDAPI, :variadic false, :file "src\\ec\\core.cljs", :end-column 16, :method-params ([o]), :protocol-impl nil, :arglists-meta (), :column 1, :line 179, :end-line 179, :max-fixed-arity 1, :fn-var true, :arglists nil, :test true}, object-display {:protocol-inline nil, :meta {:file "C:\\Users\\jplur\\Desktop\\dev\\place-makers\\src\\ec\\core.cljs", :line 76, :column 7, :end-line 76, :end-column 21, :arglists (quote ([o]))}, :name ec.core/object-display, :variadic false, :file "src\\ec\\core.cljs", :end-column 21, :method-params ([o]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 76, :end-line 76, :max-fixed-arity 1, :fn-var true, :arglists (quote ([o])), :test true}, Comp {:num-fields 1, :protocols #{cljs.core/ISwap cljs.core/IDeref}, :name ec.core/Comp, :file "src\\ec\\core.cljs", :end-column 14, :type true, :column 10, :line 164, :record false, :end-line 164, :skip-protocol-flag #{cljs.core/ISwap cljs.core/IDeref}}, deserialize {:protocol-inline nil, :meta {:file "C:\\Users\\jplur\\Desktop\\dev\\place-makers\\src\\ec\\core.cljs", :line 22, :column 4, :end-line 22, :end-column 15, :protocol ec.core/IThing, :doc nil, :arglists (quote ([o m]))}, :protocol ec.core/IThing, :name ec.core/deserialize, :variadic false, :file "src\\ec\\core.cljs", :end-column 15, :method-params ([o m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 22, :max-fixed-arity 2, :fn-var true, :arglists (quote ([o m])), :doc nil, :test true}, ComponentAPI {:protocol-inline nil, :meta {:file "C:\\Users\\jplur\\Desktop\\dev\\place-makers\\src\\ec\\core.cljs", :line 231, :column 10, :end-line 231, :end-column 22}, :name ec.core/ComponentAPI, :variadic false, :file "src\\ec\\core.cljs", :end-column 22, :method-params ([o]), :protocol-impl nil, :arglists-meta (), :column 1, :line 231, :end-line 231, :max-fixed-arity 1, :fn-var true, :arglists nil, :test true}, reserved {:name ec.core/reserved, :file "src\\ec\\core.cljs", :line 10, :column 1, :end-line 10, :end-column 14, :test true, :meta {:file "C:\\Users\\jplur\\Desktop\\dev\\place-makers\\src\\ec\\core.cljs", :line 10, :column 6, :end-line 10, :end-column 14}}}, :require-macros {ec.macros ec.macros}, :cljs.analyzer/constants {:seen #{:children :serialize :copy :init :HTML :destroy :update :components :deserialize}, :order [:init :update :destroy :serialize :deserialize :copy :HTML :children :components]}, :doc nil}